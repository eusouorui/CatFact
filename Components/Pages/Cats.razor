@page "/cats"

<h1>Cats</h1>


<div class="catDiv">
    @if (hasInfo)
    {
        <img src="@catImagePath" alt="">
        <p>@catFact</p>
        <button @onclick="ChangeInfo">Show a Cat Fact</button>
    }
    else
    {
        <p>Loading...</p>
    }
</div>


@code {
    private string? catImagePath;
    private string? catFact;
    private const string relativePath = "Images/cats/";
    private const string apiUrl = "https://catfact.ninja/fact";
    private bool hasInfo = false;

    private async Task ChangeInfo()
    {
        catFact = await GetCatFact(apiUrl);
        catImagePath = GetCatPhotoPath(relativePath);
    }

    private async Task<string> GetCatFact(string apiUrl)
    {
        using HttpClient client = new();
        try
        {
            HttpResponseMessage response = await client.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                string responseData = await response.Content.ReadAsStringAsync();

                var jObject = JObject.Parse(responseData);

                var fact = jObject["fact"]?.ToString();
                
                return fact ?? $"Failed to get data from the API. Status code: {response.StatusCode}";
            }
            else
            {
                return $"Failed to get data from the API. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            return $"An error occurred: {ex.Message}";
        }
    }

    private string GetCatPhotoPath(string relativePath)
    {
        var totalFiles = 11;

        var rnd = new Random();

        var randomCatImageNumber = rnd.Next(1, totalFiles + 1);

        var fileExtension = ".png";

        return $"{relativePath}{randomCatImageNumber}{fileExtension}";
    }

    protected override async Task OnInitializedAsync()
    {
        await ChangeInfo();
        hasInfo = true;
    }
}