@page "/catFacts"

<h1>Cat Facts</h1>


<div class="catDiv">
    @if (_hasInfo)
    {
        <img src="@_catImagePath" alt="">
        <p>@_catFact</p>
        <button @onclick="ChangeInfo" disabled="@_disabled">Show a Cat Fact</button>
    }
    else
    {
        <p>Loading...</p>
    }
</div>


@code {
    private string? _catImagePath;
    private int _catImageNumber;
    private string? _catFact;
    private const string _relativePath = "Images/cats/";
    private const string _apiUrl = "https://catfact.ninja/fact";
    private bool _hasInfo = false;
    private bool _disabled;

    private async Task ChangeInfo()
    {
        _disabled = true;
        _catFact = await GetCatFact(_apiUrl);
        _catImagePath = GetCatPhotoPath(_relativePath);
        _disabled = false;
    }

    private async Task<string> GetCatFact(string apiUrl)
    {
        using HttpClient client = new();
        try
        {
            HttpResponseMessage response = await client.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                string responseData = await response.Content.ReadAsStringAsync();

                var jObject = JObject.Parse(responseData);

                var fact = jObject["fact"]?.ToString();

                return fact ?? $"Failed to get data from the API. Status code: {response.StatusCode}";
            }
            else
            {
                return $"Failed to get data from the API. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            return $"An error occurred: {ex.Message}";
        }
    }

    private string GetCatPhotoPath(string relativePath)
    {
        var totalFiles = 11;
        var rnd = new Random();

        var random = 0;
        var counter = 10;

        do
        {
            random = rnd.Next(1, totalFiles + 1);

            counter--;
            if (counter == 0) break;

        } while (random == _catImageNumber);

        _catImageNumber = random;

        if (random == _catImageNumber)
        {
            _catImageNumber = _catImageNumber == totalFiles ? 1 : _catImageNumber++;
        }
        else
        {
            _catImageNumber = random;
        }

        var fileExtension = ".png";

        return $"{relativePath}{_catImageNumber}{fileExtension}";
    }

    protected override async Task OnInitializedAsync()
    {
        await ChangeInfo();
        _hasInfo = true;
    }
}