@page "/catBreeds"
@using Microsoft.AspNetCore.Components.QuickGrid
<h3>Breeds</h3>

@if (_catBreeds.AsQueryable() == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="grid">
        <QuickGrid Items="_catBreeds.AsQueryable()" Pagination="@pagination">
            <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="breed-name" />
            <PropertyColumn Property="@(c => c.Country)" Sortable="true" Align="Align.Right" />
            <PropertyColumn Property="@(c => c.Origin)" Sortable="true" Align="Align.Right" />
            <PropertyColumn Property="@(c => c.Coat)" Sortable="true" Align="Align.Right" />
            <PropertyColumn Property="@(c => c.Pattern)" Sortable="true" Align="Align.Right" />
        </QuickGrid>
    </div>
}

<div class="page-buttons">
    Page:
    @if (pagination.TotalItemCount.HasValue)
    {
        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
        {
            var capturedIndex = pageIndex;
            <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                    class="@PageButtonClass(capturedIndex)"
                    aria-current="@AriaCurrentValue(capturedIndex)"
                    aria-label="Go to page @(pageIndex + 1)">
                @(pageIndex + 1)
            </button>
        }
    }
</div>

@code {
    private string[] _apiUrls = {
        "https://catfact.ninja/breeds?page=1", "https://catfact.ninja/breeds?page=2", "https://catfact.ninja/breeds?page=3", "https://catfact.ninja/breeds?page=4"
    };
    private Breed[]? _catBreeds = new Breed[] { };
    PaginationState pagination = new PaginationState { ItemsPerPage = 11 };

    private int DiscoverNewIndex(int index)
    {

        return index == 4 ? 0 : index == -1 ? 3 : index;
        /*if (index == 4)
            return 0;

        if (index == -1)
            return 3;

        return index;*/
    }

    private async Task<Breed[]> GetAllBreeds(string apiUrl)
    {
        using HttpClient client = new();
        try
        {
            HttpResponseMessage response = await client.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                string responseData = await response.Content.ReadAsStringAsync();

                var jObject = JObject.Parse(responseData);

                var data = jObject["data"];

                var _breeds = Enumerable.Range(0, data.Count()).Select(index => new Breed
                    {
                        Name = data[index]?["breed"]?.ToString(),
                        Country = data[index]?["country"]?.ToString(),
                        Origin = data[index]?["origin"]?.ToString(),
                        Coat = data[index]?["coat"]?.ToString(),
                        Pattern = data[index]?["pattern"]?.ToString()
                    }).ToArray();

                return _breeds;
                //?? $"Failed to get data from the API. Status code: {response.StatusCode}";
            }
            else
            {
                return Enumerable.Range(1, 5).Select(index => new Breed
                    {
                        Name = "1",
                        Country = "2",
                        Origin = "3",
                        Coat = "4",
                        Pattern = "5"
                    }).ToArray();
                //$"Failed to get data from the API. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            return Enumerable.Range(1, 5).Select(index => new Breed
                {
                    Name = "5",
                    Country = "4",
                    Origin = "3",
                    Coat = "2",
                    Pattern = "1"
                }).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
     {
        for (int i = 0; i < 4; i++)
        {
            _catBreeds = _catBreeds.Concat(await GetAllBreeds(_apiUrls[i])).ToArray();
        }
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }



    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;


    private class Breed
    {
        public string? Name { get; set; }
        public string? Country { get; set; }
        public string? Origin { get; set; }
        public string? Coat { get; set; }
        public string? Pattern { get; set; }
    }
}
